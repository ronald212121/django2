from django.db import models
from django.contrib.auth.models import User
from django.db.models.signals import post_save
from django.dispatch import receiver
import json
from .scoring import calculate_security_score, get_security_rating, get_score_color

class UserProfile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='profile')
    avatar = models.ImageField(upload_to='avatars/', null=True, blank=True)
    bio = models.TextField(max_length=500, blank=True)
    location = models.CharField(max_length=30, blank=True)
    birth_date = models.DateField(null=True, blank=True)
    phone_number = models.CharField(max_length=15, blank=True)
    is_verified = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    # Scan statistics
    total_scans = models.IntegerField(default=0)
    vulnerabilities_found = models.IntegerField(default=0)
    last_scan_date = models.DateTimeField(null=True, blank=True)
    
    def __str__(self):
        return f"{self.user.username}'s Profile"
    
    @property
    def display_name(self):
        if self.user.first_name and self.user.last_name:
            return f"{self.user.first_name} {self.user.last_name}"
        return self.user.username
    
    @property
    def avatar_url(self):
        if self.avatar:
            return self.avatar.url
        return '/static/images/default-avatar.png'

# Signal untuk otomatis membuat profile ketika user baru dibuat
@receiver(post_save, sender=User)
def create_user_profile(sender, instance, created, **kwargs):
    if created:
        UserProfile.objects.create(user=instance)

@receiver(post_save, sender=User)
def save_user_profile(sender, instance, **kwargs):
    if hasattr(instance, 'profile'):
        instance.profile.save()
    else:
        UserProfile.objects.create(user=instance)

# Model untuk menyimpan hasil scan
class ScanHistory(models.Model):
    SCAN_TYPES = [
        ('nmap', 'NMAP Scan'),
        ('nikto', 'NIKTO Scan'),
        ('combined', 'Combined Scan'),
    ]
    
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='scans')
    target = models.CharField(max_length=255)
    scan_type = models.CharField(max_length=20, choices=SCAN_TYPES)
    results = models.TextField()
    vulnerabilities_count = models.IntegerField(default=0)
    created_at = models.DateTimeField(auto_now_add=True)
    is_completed = models.BooleanField(default=False)
    
    class Meta:
        ordering = ['-created_at']
    
    def __str__(self):
        return f"{self.user.username} - {self.scan_type} - {self.target}"

# Model ScanResult untuk compatibility dengan scanner yang sudah ada
class ScanResult(models.Model):
    TOOL_CHOICES = (
        ('nmap', 'NMAP'),
        ('nikto', 'NIKTO'),
    )
    
    SEVERITY_CHOICES = (
        ('low', 'Low'),
        ('medium', 'Medium'),
        ('high', 'High'),
        ('critical', 'Critical'),
        ('info', 'Info'),
    )
    
    user = models.ForeignKey(User, on_delete=models.CASCADE, null=True, blank=True, related_name='scan_results')
    target = models.CharField(max_length=255)
    tool = models.CharField(max_length=10, choices=TOOL_CHOICES)
    scan_type = models.CharField(max_length=50)
    result = models.TextField()
    recommendation = models.TextField(blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    
    # Statistik tingkat kerentanan
    low_count = models.IntegerField(default=0)
    medium_count = models.IntegerField(default=0)
    high_count = models.IntegerField(default=0)
    critical_count = models.IntegerField(default=0)
    info_count = models.IntegerField(default=0)
    
    def __str__(self):
        return f"{self.tool} scan on {self.target} - {self.created_at}"
        
    def get_total_vulnerabilities(self):
        """
        FIXED: Get total ACTUAL vulnerabilities (excluding info findings)
        Info-level findings are not counted as vulnerabilities
        """
        return self.low_count + self.medium_count + self.high_count + self.critical_count
    
    def get_total_findings(self):
        """
        Get total findings including info-level findings
        """
        return self.low_count + self.medium_count + self.high_count + self.critical_count + self.info_count
        
    def get_result_dict(self):
        try:
            return json.loads(self.result)
        except:
            return {}
    
    # FIXED: SECURITY-AWARE SCORING METHODS
    def get_security_score(self):
        """
        FIXED: Calculate and return security score with security-aware features
        Prioritizes engine score for security-aware scans
        """
        
        # FIXED: For security-aware scans, try to use engine score first
        if 'security_aware' in self.scan_type.lower():
            try:
                result_data = json.loads(self.result)
                engine_score = result_data.get('security_score', None)
                if engine_score is not None:
                    print(f"DEBUG: Using engine score from security-aware scan: {engine_score}")
                    return int(engine_score)
            except Exception as e:
                print(f"DEBUG: Could not get engine score: {e}")
        
        # FIXED: Enhanced model scoring with positive security feature detection
        return self.calculate_enhanced_model_score()
    
    def calculate_enhanced_model_score(self):
        """
        FIXED: Enhanced model scoring that detects positive security features
        """
        
        # Base penalty calculation (FIXED: Info gets 0 penalty)
        penalty = 0
        penalty += self.critical_count * 40
        penalty += self.high_count * 25
        penalty += self.medium_count * 12
        penalty += self.low_count * 5
        penalty += self.info_count * 0  # FIXED: Info gets ZERO penalty
        
        base_score = max(0, 100 - penalty)
        
        # FIXED: Check for positive security features in result data
        positive_bonus = 0
        security_features = []
        
        try:
            result_data = json.loads(self.result)
            
            # Check for positive security implementations
            vulnerabilities = result_data.get('vulnerabilities', [])
            for vuln in vulnerabilities:
                description = vuln.get('description', '').lower()
                vuln_type = vuln.get('type', '').lower()
                is_positive = vuln.get('is_positive', False)
                
                # Security headers detection
                if is_positive or any(header in description for header in [
                    'x-frame-options', 'x-content-type-options', 'strict-transport-security',
                    'content-security-policy', 'referrer-policy', 'permissions-policy'
                ]):
                    security_features.append("Security Headers")
                    positive_bonus += 5
                
                # Rate limiting detection
                if any(term in description for term in [
                    'rate limit', 'too many requests', '429'
                ]):
                    security_features.append("Rate Limiting")
                    positive_bonus += 10
                
                # Strong authentication detection
                if any(term in description for term in [
                    'bcrypt', 'strong hashing', 'secure authentication'
                ]):
                    security_features.append("Strong Authentication")
                    positive_bonus += 15
            
            # Check for explicit positive security features
            app_vulns = result_data.get('application_vulnerabilities', [])
            for vuln in app_vulns:
                if vuln.get('is_positive', False):
                    positive_bonus += 10
                    security_features.append("Positive Security Feature")
            
        except Exception as e:
            print(f"DEBUG: Could not analyze positive security features: {e}")
        
        # Calculate final score
        final_score = base_score + min(positive_bonus, 25)  # Max 25 bonus
        
        # FIXED: Special handling for excellent security sites
        if (self.critical_count == 0 and self.high_count == 0 and 
            self.medium_count == 0 and positive_bonus >= 15):
            # Sites with excellent security implementations
            final_score = max(final_score, 95)  # Minimum 95 for perfect security
        elif (self.critical_count == 0 and self.high_count == 0 and 
              self.medium_count == 0):
            # Sites with only low-level issues
            final_score = max(final_score, 85)  # Minimum 85 for good security
        
        final_score = min(final_score, 100)  # Cap at 100
        
        print(f"DEBUG: Enhanced model scoring - Base: {base_score}, Bonus: {positive_bonus}, Features: {security_features}, Final: {final_score}")
        
        return int(final_score)
    
    def get_security_rating(self):
        """Get security rating text"""
        score = self.get_security_score()
        return get_security_rating(score)
    
    def get_score_color(self):
        """Get color class for score display"""
        score = self.get_security_score()
        return get_score_color(score)
    
    def get_severity_breakdown(self):
        """Get breakdown of vulnerabilities by severity"""
        return {
            'critical': self.critical_count,
            'high': self.high_count,
            'medium': self.medium_count,
            'low': self.low_count,
            'info': self.info_count,
            'total_vulnerabilities': self.get_total_vulnerabilities(),  # FIXED: Excludes info
            'total_findings': self.get_total_findings()  # Includes info
        }
    
    def get_security_summary(self):
        """Get comprehensive security summary"""
        score = self.get_security_score()
        rating = self.get_security_rating()
        total_vulns = self.get_total_vulnerabilities()  # FIXED: Excludes info
        
        return {
            'score': score,
            'rating': rating,
            'color': self.get_score_color(),
            'total_vulnerabilities': total_vulns,  # FIXED: Excludes info
            'total_findings': self.get_total_findings(),  # Includes info
            'severity_breakdown': self.get_severity_breakdown(),
            'scan_info': {
                'target': self.target,
                'tool': self.tool,
                'scan_type': self.scan_type,
                'date': self.created_at
            }
        }