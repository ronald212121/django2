"""
INDUSTRY STANDARD SECURITY SCORING SYSTEM
Mengikuti standar CVSS (Common Vulnerability Scoring System) dan praktik industri keamanan siber

Standar yang diikuti:
- CVSS v3.1 Base Score Guidelines
- OWASP Risk Rating Methodology 
- NIST Cybersecurity Framework
- ISO/IEC 27001 Risk Assessment
- Industry Best Practices for Vulnerability Assessment

Author: Security Assessment Framework
Version: 2.0 (Industry Standard Compliant)
"""

import json
import math
from datetime import datetime

# INDUSTRY STANDARD: CVSS-Based Severity Classifications
CVSS_SEVERITY_RANGES = {
    'critical': (9.0, 10.0),    # CVSS 9.0-10.0
    'high': (7.0, 8.9),         # CVSS 7.0-8.9
    'medium': (4.0, 6.9),       # CVSS 4.0-6.9
    'low': (0.1, 3.9),          # CVSS 0.1-3.9
    'info': (0.0, 0.0)          # CVSS 0.0 (Informational)
}

# INDUSTRY STANDARD: Vulnerability Type Risk Multipliers (Based on OWASP Top 10)
VULNERABILITY_RISK_MULTIPLIERS = {
    # OWASP Top 10 Critical Application Vulnerabilities
    'SQL Injection': 2.5,                    # Extremely high risk
    'Command Injection': 2.5,               # Extremely high risk  
    'Unrestricted File Upload': 2.3,        # Very high risk
    'Remote Code Execution': 2.5,           # Extremely high risk
    'Authentication Bypass': 2.2,           # Very high risk
    'Cross-Site Scripting (XSS)': 1.8,     # High risk
    'Cross-Site Request Forgery (CSRF)': 1.5, # Medium-high risk
    'Directory Traversal': 1.7,             # High risk
    'Sensitive Information Disclosure': 1.4, # Medium risk
    'Session Management': 1.3,              # Medium risk
    'Missing Security Headers': 1.1,        # Low-medium risk
    'Infrastructure Finding': 1.0,          # Standard risk
    'Configuration Issue': 1.2,             # Medium risk
    'SSL/TLS Issue': 1.4,                   # Medium risk
    'Weak Password Policy': 1.3,            # Medium risk
    'Insecure Direct Object Reference': 1.8, # High risk
    'Security Misconfiguration': 1.3,       # Medium risk
    'Using Components with Known Vulnerabilities': 1.6, # Medium-high risk
    'Insufficient Logging & Monitoring': 1.1, # Low-medium risk
}

# INDUSTRY STANDARD: Base Penalty Points (Aligned with CVSS Impact)
BASE_PENALTY_POINTS = {
    'critical': 85,    # Maximum impact on confidentiality, integrity, availability
    'high': 55,        # High impact on C.I.A.
    'medium': 25,      # Some impact on C.I.A.
    'low': 8,          # Minimal impact on C.I.A.
    'info': 0          # No security impact
}

# INDUSTRY STANDARD: Risk Multipliers for Multiple Vulnerabilities
MULTIPLE_VULNERABILITY_RISK = {
    'critical_multiplier': {
        1: 1.0,   # Single critical vulnerability
        2: 1.8,   # Two critical vulnerabilities (compound risk)
        3: 2.5,   # Three or more (systemic failure)
    },
    'high_multiplier': {
        1: 1.0,   # Single high vulnerability
        2: 1.4,   # Two high vulnerabilities
        3: 1.7,   # Three high vulnerabilities
        5: 2.0,   # Five or more high vulnerabilities
    }
}

def calculate_security_score(scan_result):
    """
    INDUSTRY STANDARD: Calculate comprehensive security score using multiple methodologies
    
    Combines:
    - CVSS-based severity scoring
    - OWASP risk assessment methodology
    - Multi-factor risk analysis
    - Industry vulnerability impact assessment
    
    Args:
        scan_result: ScanResult instance with vulnerability data
        
    Returns:
        int: Security score from 0-100 (higher = more secure)
    """
    
    # Step 1: Extract vulnerability data
    vuln_counts = {
        'critical': scan_result.critical_count or 0,
        'high': scan_result.high_count or 0,
        'medium': scan_result.medium_count or 0,
        'low': scan_result.low_count or 0,
        'info': scan_result.info_count or 0
    }
    
    # Step 2: Check for application vulnerability context
    try:
        result_data = json.loads(scan_result.result)
        app_vulnerabilities = result_data.get('application_vulnerabilities', [])
        has_app_scan = len(app_vulnerabilities) > 0
        scan_failed = result_data.get('scan_failed', False)
    except:
        app_vulnerabilities = []
        has_app_scan = False
        scan_failed = False
    
    # Step 3: Handle failed scans
    if scan_failed:
        return 0
    
    # Step 4: Calculate score using appropriate methodology
    if has_app_scan:
        return calculate_application_security_score(vuln_counts, app_vulnerabilities)
    else:
        return calculate_infrastructure_security_score(vuln_counts)

def calculate_application_security_score(vuln_counts, app_vulnerabilities):
    """
    INDUSTRY STANDARD: Calculate security score for application vulnerability assessments
    
    Uses enhanced OWASP-based methodology with CVSS impact scoring
    """
    
    # Base score starts at 100 (perfect security)
    base_score = 100.0
    
    # Step 1: Calculate base penalty using CVSS-aligned methodology
    base_penalty = 0.0
    
    for severity, count in vuln_counts.items():
        if count > 0:
            penalty_per_vuln = BASE_PENALTY_POINTS.get(severity, 0)
            base_penalty += count * penalty_per_vuln
    
    # Step 2: Apply vulnerability type risk multipliers (OWASP-based)
    type_risk_penalty = 0.0
    critical_app_vulns = 0
    high_app_vulns = 0
    
    for vuln in app_vulnerabilities:
        vuln_type = vuln.get('type', 'Unknown')
        severity = vuln.get('severity', 'info').lower()
        
        # Get risk multiplier for vulnerability type
        risk_multiplier = VULNERABILITY_RISK_MULTIPLIERS.get(vuln_type, 1.0)
        base_vuln_penalty = BASE_PENALTY_POINTS.get(severity, 0)
        
        # Apply type-specific risk multiplier
        type_penalty = base_vuln_penalty * risk_multiplier
        type_risk_penalty += type_penalty
        
        # Count critical application vulnerabilities
        if vuln_type in ['SQL Injection', 'Command Injection', 'Unrestricted File Upload', 'Remote Code Execution']:
            if severity == 'critical':
                critical_app_vulns += 1
            elif severity == 'high':
                high_app_vulns += 1
    
    # Step 3: Apply multiple vulnerability risk multipliers
    multiple_vuln_penalty = 0.0
    
    # Critical vulnerability compound risk
    critical_count = vuln_counts['critical']
    if critical_count > 0:
        if critical_count >= 3:
            multiplier = MULTIPLE_VULNERABILITY_RISK['critical_multiplier'][3]
        elif critical_count == 2:
            multiplier = MULTIPLE_VULNERABILITY_RISK['critical_multiplier'][2]
        else:
            multiplier = MULTIPLE_VULNERABILITY_RISK['critical_multiplier'][1]
        
        multiple_vuln_penalty += critical_count * BASE_PENALTY_POINTS['critical'] * (multiplier - 1.0)
    
    # High vulnerability compound risk
    high_count = vuln_counts['high']
    if high_count > 0:
        if high_count >= 5:
            multiplier = MULTIPLE_VULNERABILITY_RISK['high_multiplier'][5]
        elif high_count >= 3:
            multiplier = MULTIPLE_VULNERABILITY_RISK['high_multiplier'][3]
        elif high_count == 2:
            multiplier = MULTIPLE_VULNERABILITY_RISK['high_multiplier'][2]
        else:
            multiplier = MULTIPLE_VULNERABILITY_RISK['high_multiplier'][1]
        
        multiple_vuln_penalty += high_count * BASE_PENALTY_POINTS['high'] * (multiplier - 1.0)
    
    # Step 4: Apply OWASP Top 10 critical application vulnerability penalties
    if critical_app_vulns > 0:
        # Sites with critical application vulnerabilities are extremely vulnerable
        app_critical_penalty = critical_app_vulns * 120  # Severe penalty
        base_penalty += app_critical_penalty
        
        # Additional systemic failure penalty for multiple critical app vulns
        if critical_app_vulns >= 3:
            base_penalty += 150  # Systemic security failure
        elif critical_app_vulns >= 2:
            base_penalty += 80   # Multiple critical app vulns
    
    # Step 5: Calculate final score
    total_penalty = base_penalty + type_risk_penalty + multiple_vuln_penalty
    final_score = base_score - total_penalty
    
    # Step 6: Apply industry standard scoring caps
    # Sites with critical application vulnerabilities cannot score above certain thresholds
    if critical_app_vulns >= 3:
        final_score = min(final_score, 5)   # Maximum 5% for systemic failure
    elif critical_app_vulns >= 2:
        final_score = min(final_score, 15)  # Maximum 15% for multiple critical
    elif critical_app_vulns >= 1:
        final_score = min(final_score, 25)  # Maximum 25% for single critical app vuln
    elif vuln_counts['critical'] >= 2:
        final_score = min(final_score, 35)  # Maximum 35% for multiple critical (non-app)
    elif vuln_counts['critical'] >= 1:
        final_score = min(final_score, 50)  # Maximum 50% for single critical
    
    # Ensure score is within valid range
    final_score = max(0, min(100, final_score))
    
    return int(round(final_score))

def calculate_infrastructure_security_score(vuln_counts):
    """
    INDUSTRY STANDARD: Calculate security score for infrastructure-only assessments
    
    Uses NIST Cybersecurity Framework aligned methodology
    """
    
    # Base score starts at 100
    base_score = 100.0
    
    # Apply CVSS-aligned penalties
    total_penalty = 0.0
    
    for severity, count in vuln_counts.items():
        if count > 0:
            penalty_per_vuln = BASE_PENALTY_POINTS.get(severity, 0)
            total_penalty += count * penalty_per_vuln
    
    # Apply multiple vulnerability penalties for infrastructure
    critical_count = vuln_counts['critical']
    high_count = vuln_counts['high']
    
    # Multiple critical infrastructure vulnerabilities
    if critical_count >= 3:
        total_penalty += 100  # Severe infrastructure compromise risk
    elif critical_count >= 2:
        total_penalty += 60   # Significant infrastructure risk
    elif critical_count >= 1:
        total_penalty += 30   # Infrastructure vulnerability present
    
    # Multiple high vulnerabilities
    if high_count >= 5:
        total_penalty += 50   # Many high-severity issues
    elif high_count >= 3:
        total_penalty += 30   # Several high-severity issues
    
    final_score = base_score - total_penalty
    
    # Apply infrastructure scoring caps
    if critical_count >= 3:
        final_score = min(final_score, 20)  # Maximum 20% for multiple critical
    elif critical_count >= 2:
        final_score = min(final_score, 40)  # Maximum 40% for two critical
    elif critical_count >= 1:
        final_score = min(final_score, 60)  # Maximum 60% for one critical
    
    final_score = max(0, min(100, final_score))
    
    return int(round(final_score))

def get_security_rating(score):
    """
    INDUSTRY STANDARD: Get security rating based on CVSS and industry standards
    
    Aligned with:
    - CVSS v3.1 severity ratings
    - NIST risk categories
    - Industry standard risk classifications
    """
    
    if score >= 95:
        return "Excellent"          # Industry leading security
    elif score >= 85:
        return "Very Good"          # Strong security posture
    elif score >= 70:
        return "Good"               # Adequate security measures
    elif score >= 55:
        return "Fair"               # Some security concerns
    elif score >= 40:
        return "Poor"               # Significant security issues
    elif score >= 25:
        return "Very Poor"          # Major security deficiencies
    elif score >= 10:
        return "Critical"           # Critical security failures
    else:
        return "Extremely Critical" # Imminent security threat

def get_risk_level(score):
    """
    INDUSTRY STANDARD: Get risk level classification per NIST guidelines
    """
    
    if score >= 85:
        return "LOW"
    elif score >= 70:
        return "MODERATE"
    elif score >= 40:
        return "HIGH"
    else:
        return "CRITICAL"

def get_score_color(score):
    """
    INDUSTRY STANDARD: Color coding aligned with traffic light risk assessment
    """
    
    if score >= 85:
        return "text-success"      # Green - Low risk
    elif score >= 70:
        return "text-info"         # Blue - Moderate risk
    elif score >= 55:
        return "text-warning"      # Yellow - Medium risk
    elif score >= 40:
        return "text-warning"      # Orange - High risk
    elif score >= 25:
        return "text-danger"       # Red - Critical risk
    else:
        return "text-danger"       # Dark red - Extreme risk

def calculate_cvss_base_score(vulnerability):
    """
    INDUSTRY STANDARD: Calculate CVSS v3.1 base score for individual vulnerability
    
    This is a simplified CVSS calculator for demonstration
    Real implementation would require full CVSS vector analysis
    """
    
    vuln_type = vulnerability.get('type', '')
    severity = vulnerability.get('severity', 'info').lower()
    
    # Simplified CVSS mapping based on vulnerability type
    cvss_mapping = {
        'SQL Injection': 9.8,
        'Command Injection': 9.8,
        'Unrestricted File Upload': 9.1,
        'Remote Code Execution': 9.8,
        'Authentication Bypass': 8.8,
        'Cross-Site Scripting (XSS)': 6.1,
        'Directory Traversal': 7.5,
        'Sensitive Information Disclosure': 5.3,
        'Missing Security Headers': 3.1,
        'Configuration Issue': 4.3,
    }
    
    base_cvss = cvss_mapping.get(vuln_type, 0.0)
    
    # Adjust based on reported severity if different from type-based assessment
    if severity == 'critical' and base_cvss < 9.0:
        base_cvss = max(base_cvss, 9.0)
    elif severity == 'high' and base_cvss < 7.0:
        base_cvss = max(base_cvss, 7.0)
    elif severity == 'medium' and base_cvss < 4.0:
        base_cvss = max(base_cvss, 4.0)
    elif severity == 'low' and base_cvss < 0.1:
        base_cvss = max(base_cvss, 0.1)
    
    return round(base_cvss, 1)

def get_detailed_security_analysis(scan_result):
    """
    INDUSTRY STANDARD: Comprehensive security analysis per ISO/IEC 27005
    """
    
    score = calculate_security_score(scan_result)
    rating = get_security_rating(score)
    risk_level = get_risk_level(score)
    
    # Calculate actual vulnerabilities (excluding info)
    actual_vulns = (scan_result.critical_count + scan_result.high_count + 
                   scan_result.medium_count + scan_result.low_count)
    
    # Risk assessment based on NIST framework
    if score >= 85:
        risk_assessment = "LOW RISK"
        business_impact = "Minimal impact on business operations"
        urgency = "Routine Maintenance"
        recommended_actions = [
            "Continue current security practices",
            "Schedule regular security assessments (quarterly)",
            "Maintain security awareness training",
            "Keep systems updated with latest patches",
            "Monitor security alerts and advisories"
        ]
    elif score >= 70:
        risk_assessment = "MODERATE RISK"
        business_impact = "Limited impact on business operations"
        urgency = "Address Within 30 Days"
        recommended_actions = [
            "Address medium and high severity vulnerabilities",
            "Implement additional security controls",
            "Review and update security policies",
            "Conduct security training for IT staff",
            "Schedule monthly security reviews"
        ]
    elif score >= 40:
        risk_assessment = "HIGH RISK"
        business_impact = "Significant potential impact on business"
        urgency = "Address Within 7 Days"
        recommended_actions = [
            "IMMEDIATE: Address all critical and high vulnerabilities",
            "Implement emergency security patches",
            "Review and strengthen access controls",
            "Conduct incident response planning",
            "Consider temporary protective measures"
        ]
    else:
        risk_assessment = "CRITICAL RISK"
        business_impact = "Severe threat to business continuity"
        urgency = "EMERGENCY - Address Immediately"
        recommended_actions = [
            "🚨 EMERGENCY RESPONSE REQUIRED",
            "Consider taking affected systems offline",
            "Implement immediate protective measures",
            "Activate incident response team",
            "Conduct comprehensive security audit",
            "Review all system access and permissions"
        ]
    
    # Check for critical application vulnerabilities
    try:
        result_data = json.loads(scan_result.result)
        app_vulns = result_data.get('application_vulnerabilities', [])
        critical_app_vulns = [v for v in app_vulns if v.get('type') in 
                             ['SQL Injection', 'Command Injection', 'Unrestricted File Upload']]
    except:
        critical_app_vulns = []
    
    if critical_app_vulns:
        risk_assessment = "EXTREME RISK"
        business_impact = "Imminent threat - System may be actively exploitable"
        urgency = "CRITICAL - Immediate Action Required"
        recommended_actions.insert(0, "🚨 CRITICAL APPLICATION VULNERABILITIES DETECTED")
        recommended_actions.insert(1, "System is vulnerable to immediate exploitation")
    
    return {
        'score': score,
        'rating': rating,
        'risk_level': risk_level,
        'risk_assessment': risk_assessment,
        'business_impact': business_impact,
        'urgency': urgency,
        'color': get_score_color(score),
        'recommended_actions': recommended_actions,
        'total_vulnerabilities': actual_vulns,
        'compliance_status': get_compliance_status(score),
        'industry_benchmark': get_industry_benchmark(score),
        'severity_breakdown': {
            'critical': scan_result.critical_count,
            'high': scan_result.high_count,
            'medium': scan_result.medium_count,
            'low': scan_result.low_count,
            'info': scan_result.info_count
        },
        'assessment_date': datetime.now().isoformat(),
        'methodology': 'CVSS v3.1 + OWASP + NIST Framework'
    }

def get_compliance_status(score):
    """
    INDUSTRY STANDARD: Compliance status per common frameworks
    """
    
    if score >= 85:
        return {
            'ISO27001': 'COMPLIANT',
            'SOC2': 'LIKELY COMPLIANT',
            'PCI_DSS': 'MEETS REQUIREMENTS',
            'GDPR': 'ADEQUATE SECURITY'
        }
    elif score >= 70:
        return {
            'ISO27001': 'MOSTLY COMPLIANT',
            'SOC2': 'REVIEW REQUIRED',
            'PCI_DSS': 'IMPROVEMENTS NEEDED',
            'GDPR': 'ADDITIONAL MEASURES REQUIRED'
        }
    elif score >= 40:
        return {
            'ISO27001': 'NON-COMPLIANT',
            'SOC2': 'SIGNIFICANT GAPS',
            'PCI_DSS': 'MAJOR DEFICIENCIES',
            'GDPR': 'INADEQUATE SECURITY'
        }
    else:
        return {
            'ISO27001': 'MAJOR NON-COMPLIANCE',
            'SOC2': 'CRITICAL DEFICIENCIES',
            'PCI_DSS': 'IMMEDIATE REMEDIATION REQUIRED',
            'GDPR': 'SEVERE SECURITY INADEQUACY'
        }

def get_industry_benchmark(score):
    """
    INDUSTRY STANDARD: Industry benchmark comparison
    """
    
    if score >= 90:
        return "Top 10% of organizations (Industry Leading)"
    elif score >= 80:
        return "Top 25% of organizations (Above Average)"
    elif score >= 70:
        return "Average industry security posture"
    elif score >= 50:
        return "Below average (Bottom 25%)"
    else:
        return "Bottom 10% (Critical security deficiency)"

def format_score_display(score):
    """
    INDUSTRY STANDARD: Format score for professional display
    """
    
    return {
        'score': score,
        'rating': get_security_rating(score),
        'risk_level': get_risk_level(score),
        'color_class': get_score_color(score),
        'formatted': f"{score}/100",
        'percentage': f"{score}%",
        'industry_benchmark': get_industry_benchmark(score)
    }